/*
 * Header file with sizes of arrays that need to be allocated
 * (statically) once
 *
 *
 * This file is autogenerated by Gradgen
 *
 * Metadata:
 *  + name: {{ name }}
 *
 */

#pragma once

#define NPRED_{{ name | upper}} {{ N }}
#define NX_{{ name | upper}} {{ nx }}
#define NU_{{ name | upper}} {{ nu }}

/* tree */
#define NUM_STAGES_{{ name | upper}} {{ tree.num_stages }}
#define NUM_NODES_{{ name | upper}} {{ tree.num_nodes }}
#define NUM_NONLEAF_NODES_{{ name | upper}} {{ children_to | length }}

int stages_{{ name }}[NUM_NODES_{{ name | upper}}] = { {{ tree._ScenarioTree__stages | join(', ') }} };
int ancestors_{{ name }}[NUM_NODES_{{ name | upper}}] = { {{ tree._ScenarioTree__ancestors | join(', ') }} };
int w_events_{{ name }}[NUM_NODES_{{ name | upper}}] = { {{ tree._ScenarioTree__w_idx | join(', ') }} };
int children_from_{{ name }}[NUM_NONLEAF_NODES_{{ name | upper}}] = { {{ children_from | join(', ') }} };
int children_to_{{ name }}[NUM_NONLEAF_NODES_{{ name | upper}}] = { {{ children_to | join(', ') }} };
int nodes_at_stage_from_{{ name }}[NUM_STAGES_{{ name | upper}} - 1] = { {{ nodes_at_stage_from | join(', ') }} };
int nodes_at_stage_to_{{ name }}[NUM_STAGES_{{ name | upper}} - 1] = { {{ nodes_at_stage_to | join(', ') }} };

double probabilities_{{ name }}[NUM_NODES_{{ name | upper}}] = { {{ tree._ScenarioTree__probability[:tree.num_nodes] | join(', ') }} };

/* f */
#define F_SZ_ARG_{{ name | upper}} {{ f.sz_arg() }}
#define F_SZ_IW_{{ name | upper}} {{ f.sz_iw() }}
#define F_SZ_W_{{ name | upper}} {{ f.sz_w() }}
#define F_SZ_RES_{{ name | upper}} {{ f.sz_res() }}

/* jfx */
#define JFX_SZ_ARG_{{ name | upper}} {{ jfx.sz_arg() }}
#define JFX_SZ_IW_{{ name | upper}} {{ jfx.sz_iw() }}
#define JFX_SZ_W_{{ name | upper}} {{ jfx.sz_w() }}
#define JFX_SZ_RES_{{ name | upper}} {{ jfx.sz_res() }}

/* jfu */
#define JFU_SZ_ARG_{{ name | upper}} {{ jfu.sz_arg() }}
#define JFU_SZ_IW_{{ name | upper}} {{ jfu.sz_iw() }}
#define JFU_SZ_W_{{ name | upper}} {{ jfu.sz_w() }}
#define JFU_SZ_RES_{{ name | upper}} {{ jfu.sz_res() }}

/* ell */
#define ELL_SZ_ARG_{{ name | upper}} {{ ell.sz_arg() }}
#define ELL_SZ_IW_{{ name | upper}} {{ ell.sz_iw() }}
#define ELL_SZ_W_{{ name | upper}} {{ ell.sz_w() }}
#define ELL_SZ_RES_{{ name | upper}} {{ ell.sz_res() }}

/* ellx */
#define ELLX_SZ_ARG_{{ name | upper}} {{ ellx.sz_arg() }}
#define ELLX_SZ_IW_{{ name | upper}} {{ ellx.sz_iw() }}
#define ELLX_SZ_W_{{ name | upper}} {{ ellx.sz_w() }}
#define ELLX_SZ_RES_{{ name | upper}} {{ ellx.sz_res() }}

/* ellu */
#define ELLU_SZ_ARG_{{ name | upper}} {{ ellu.sz_arg() }}
#define ELLU_SZ_IW_{{ name | upper}} {{ ellu.sz_iw() }}
#define ELLU_SZ_W_{{ name | upper}} {{ ellu.sz_w() }}
#define ELLU_SZ_RES_{{ name | upper}} {{ ellu.sz_res() }}

/* vf */
#define VF_SZ_ARG_{{ name | upper}} {{ vf.sz_arg() }}
#define VF_SZ_IW_{{ name | upper}} {{ vf.sz_iw() }}
#define VF_SZ_W_{{ name | upper}} {{ vf.sz_w() }}
#define VF_SZ_RES_{{ name | upper}} {{ vf.sz_res() }}

/* vfx */
#define VFX_SZ_ARG_{{ name | upper}} {{ vfx.sz_arg() }}
#define VFX_SZ_IW_{{ name | upper}} {{ vfx.sz_iw() }}
#define VFX_SZ_W_{{ name | upper}} {{ vfx.sz_w() }}
#define VFX_SZ_RES_{{ name | upper}} {{ vfx.sz_res() }}

