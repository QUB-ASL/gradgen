import casadi.casadi as cs
import numpy as np
import gradgen
import opengen as og

# deterministic inverted pendulum example
# code generated by gradgen and open

N = 5

x = cs.SX.sym('x', 2)
u = cs.SX.sym('u', 1)
f = gradgen.ModelFactory.create_inv_pend_model(x, u)
ell = cs.dot(x, x) + u**2
vf = 10 * cs.dot(x, x)

# generate code with gradgen
gradiator = gradgen.CostGradient(x, u, f, ell, vf, N)
gradiator.with_target_path("./generated_code").with_name("bm_algo_1_inv_pend_gradgen").build()

# generate code with casadi via open
# total cost function:
cost = 0
x0 = cs.SX.sym('x0', 2)
u_seq = cs.SX.sym('u_seq', N)
x = x0
for t in range(N):
    psi = -3 * (cs.sin(2*x[0]) + u_seq[t] * cs.cos(x[0]) -
                10*cs.sin(x[0])) / (8 - 3*cs.cos(x[0])**2)
    x = x + 0.5 * cs.vertcat(x[1], psi)
    cost = cost + cs.dot(x, x) + cs.dot(u_seq[t], u_seq[t])

cost = cost + 10 * cs.dot(x, x)


# Generate casadi code via open
#
# This will generate C code at:
#   __name__/icasadi___name__/extern/auto_casadi_grad.c
# and a Rust wrapper at:
#   __name__/icasadi___name__/
# Look at:
#   __name__/icasadi___name__/src/lib.rs
# There you will find the function:
#   pub fn grad(u: &[f64], xi: &[f64], static_params: &[f64], cost_jacobian: &mut [f64]) -> i32
# Look at the test function tst_call_grad (line 303) to see how to use it.

bounds = og.constraints.NoConstraints()
problem = og.builder.Problem(u_seq, x0, cost).with_constraints(bounds)
build_config = og.config.BuildConfiguration()\
    .with_build_directory("./generated_code").with_tcp_interface_config()
meta = og.config.OptimizerMeta().with_optimizer_name("bm_algo_1_inv_pend_open")
solver_config = og.config.SolverConfiguration()

builder = og.builder.OpEnOptimizerBuilder(problem,
                                          meta,
                                          build_config,
                                          solver_config).with_generate_not_build_flag(True)
builder.build()

# mng = og.tcp.OptimizerTcpManager('optimizers/inv_pend_bm_open')
# mng.start()
# response = mng.call([1.0, 50.0])
# print(response["solution"])
# mng.kill()
